"""
기본적으로 데이터 언패킹은 좌변의 변수와 우변 데이터 갯수가 같아야 합니다.
하지만 star expression을 사용하면 변수의 개수가 달라도 데이터 언패킹을 할 수 있습니다.
튜플에 저장된 데이터 중에서 앞에 있는 두 개 의 데이터만 필요한 경우 나머지 데이터의 언패킹 코드를 작성할 필요가 없습니다.
"""
"""
바로 앞 파일에서 
a,b,c = (0,1,2)
로 튜플 선언을 하면
a에는 1 b에는 2, c에는 3이 변수로 바인딩 되었다.
이를 이용하여 아래 문법을 이해하면 된다.
"""

# *붙여진 변수는 배열로 선언된다.
a,b, *c = (0,1,2,3,4,5)
print(a)
print(b)
print(c)


# 다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때, start expression을 사용하여 좌측 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
*valid_score, a,b = scores
print(valid_score)

# valid_score 의 변수가 scores 변수의 우측 8개의 값이 바인딩되도록 하라
a,b, *valid_score = scores
print(valid_score)

# valis_score의 변수가 scores 변수의 가운데 8개의 값이 바인딩 되도록 하라.
a, *valid_score , b = scores
print(valid_score)


# 비어있는 딕셔너리
temp = { }
print(temp)

"""
    이름    희망가격
    메로나  1000
    폴라포  1200
    빵빠레  1800
    
아래 key : value 가 바인딩된 딕셔너리를 생성하라.

"""
ice = {"메로나" : 1000, "폴라포" : 1200, "빵빠레" : 1800}
print(ice)

# ice 딕셔너리에 아래 가격정보를 추가하라
"""
    이름    희망가격
    죠스바  1200
    월드콘  1500
"""
ice["죠스바"] = 1200
ice["월드콘"] = 1500
print(ice)

# ice 딕셔너리 값 안의 "메로나"의 가격을 출력하라
print("메로나 가격 : ", ice["메로나"])

# "메로나"의 가격을 1300으로 수정하라
ice["메로나"] = 1300
print(ice)

# "메로나" 가격정보를 삭제하라
del ice["메로나"]
print(ice)

# 딕셔너리에 없는 키를 사용하면 인덱싱 에러가 발생합니다.
"""
icecream = {'폴라포': 1200, '빵빠레': 1800, '월드콘': 1500, '메로나': 1000}
icecream['누가바']
"""

